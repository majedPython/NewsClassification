# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dGKYc0J8eqTJnc3xgrwM4fY74VtCZVGw
"""

import os
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd
from bs4 import BeautifulSoup
import re

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Project/BBC News Train.csv'
df = pd.read_csv(file_path)





df

df['Category'].value_counts()

file_path = '/content/drive/MyDrive/Project/News_Category_Dataset_v3.json'
# Try reading the file with the 'lines' parameter set to True
try:
    df0 = pd.read_json(file_path, lines=True)
except ValueError as e:
    # If the above fails, try reading it as a list of JSON objects
    import json
    with open(file_path, 'r') as f:
        data = '[' + f.read().replace('}\n{', '}, {') + ']'  # Assuming each line is a JSON object

    df0 = pd.read_json(data)

df0

df0.drop(columns=['link','authors','date','headline'],inplace=True)

df0

df0['category'].value_counts()

df0.sample(10)

df1=df0[(df0['category']=='BUSINESS')|(df0['category']=='SPORTS')|(df0['category']=='TECH')|(df0['category']=='ENTERTAINMENT')|(df0['category']=='POLITICS')|(df0['category']=='SCIENCE')]

df1['category'].value_counts()

def cleanText(text):
      text = BeautifulSoup(text, "lxml").text
      text = re.sub(r'\|\|\|', r' ', text)
      text = re.sub(r'http\S+', r'<URL>', text)
      text = re.sub(r'[http://]?www.\w+\.\w+','',text)
      text = re.sub(r'@\w+', '', text)
      text = re.sub(r'\d+', '', text)
      text = re.sub(r'[^A-Za-z0-9 ]+', '', text)
      return text
df['Text'] = df['Text'].apply(cleanText)
df1['short_description'] = df1['short_description'].apply(cleanText)

df

df1

def load_imdb_data(df):
    texts = df['Text'].tolist()
    labels = [0 if label == "sport"
              else 1 if label == "business"
              else 2 if label == "politics"
              else 3 if label == "entertainment"
              else 4
              for label in df['Category'].tolist()]
    return texts, labels

texts, labels = load_imdb_data(df)

class TextClassificationDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_length):
            self.texts = texts
            self.labels = labels
            self.tokenizer = tokenizer
            self.max_length = max_length
    def __len__(self):
        return len(self.texts)
    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer(text, return_tensors='pt', max_length=self.max_length, padding='max_length', truncation=True)
        return {'input_ids': encoding['input_ids'].flatten(), 'attention_mask': encoding['attention_mask'].flatten(), 'label': torch.tensor(label)}

class BERTClassifier(nn.Module):
    def __init__(self, bert_model_name, num_classes):
        super(BERTClassifier, self).__init__()
        self.bert = BertModel.from_pretrained(bert_model_name)
        self.dropout = nn.Dropout(0.1)
        self.fc = nn.Linear(self.bert.config.hidden_size, num_classes)

    def forward(self, input_ids, attention_mask):
            outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
            pooled_output = outputs.pooler_output
            x = self.dropout(pooled_output)
            logits = self.fc(x)
            return logits

def train(model, data_loader, optimizer, scheduler, device):
    model.train()
    for batch in data_loader:
        optimizer.zero_grad() # at each batch you have to reset the grads to 0 so that you restrart calculating the grads
        input_ids = batch['input_ids'].to(device) # moves the data to the device ( cpu or gpu )
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['label'].to(device)
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        loss = nn.CrossEntropyLoss()(outputs, labels)
        loss.backward() # This line computes the gradients of the loss with respect to the model parameters. This is necessary for updating the model weights during training.
        optimizer.step() # This line updates the model parameters using the optimizer, applying the computed gradients to minimize the loss.
        scheduler.step() # This line updates the learning rate according to the specified schedule.

def evaluate(model, data_loader, device):
    model.eval()
    predictions = []
    actual_labels = []
    with torch.no_grad(): # Disable Gradient Tracking
        for batch in data_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
            predictions.extend(preds.cpu().tolist())
            actual_labels.extend(labels.cpu().tolist())
    return accuracy_score(actual_labels, predictions), classification_report(actual_labels, predictions)

def predict_category(text, model, tokenizer, device, max_length=256):
    model.eval()
    encoding = tokenizer(text, return_tensors='pt', max_length=max_length, padding='max_length', truncation=True)
    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)

    with torch.no_grad():
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
    return  ("sport"  if preds.item() == 0 else "business"
                            if preds.item() == 1 else "politics"
                            if preds.item() == 2 else "entertainment"
                            if preds.item() == 3 else "Tech")

# Set up parameters
bert_model_name = 'bert-base-uncased'
num_classes = 5
max_length = 256
batch_size = 16
num_epochs = 4
learning_rate = 2e-5

train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.2, random_state=42)

tokenizer = BertTokenizer.from_pretrained(bert_model_name)
train_dataset = TextClassificationDataset(train_texts, train_labels, tokenizer, max_length)
val_dataset = TextClassificationDataset(val_texts, val_labels, tokenizer, max_length)
train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_dataloader = DataLoader(val_dataset, batch_size=batch_size)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = BERTClassifier(bert_model_name, num_classes).to(device)

optimizer = AdamW(model.parameters(), lr=learning_rate)
total_steps = len(train_dataloader) * num_epochs
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)
# It creates a scheduler that modifies the learning rate according to a linear schedule after a warmup period.
# In this case, it is set to 0, meaning there is no warmup phaseâ€” the learning rate will start at its initial value from the beginning.

for epoch in range(num_epochs):
    print(f"Epoch {epoch + 1}/{num_epochs}")
    train(model, train_dataloader, optimizer, scheduler, device)
    accuracy, report = evaluate(model, val_dataloader, device)
    print(f"Validation Accuracy: {accuracy:.4f}")
    print(report)

import joblib

joblib.dump(model, 'BERT.joblib')